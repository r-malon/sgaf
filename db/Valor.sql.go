// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: Valor.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createValor = `-- name: CreateValor :one
INSERT INTO Valor (valor, data_inicio, data_fim) VALUES (?, ?, ?) RETURNING id, valor, data_inicio, data_fim
`

type CreateValorParams struct {
	Valor      int64        `json:"valor"`
	DataInicio time.Time    `json:"data_inicio"`
	DataFim    sql.NullTime `json:"data_fim"`
}

func (q *Queries) CreateValor(ctx context.Context, arg CreateValorParams) (Valor, error) {
	row := q.db.QueryRowContext(ctx, createValor, arg.Valor, arg.DataInicio, arg.DataFim)
	var i Valor
	err := row.Scan(
		&i.ID,
		&i.Valor,
		&i.DataInicio,
		&i.DataFim,
	)
	return i, err
}

const deleteValor = `-- name: DeleteValor :exec
DELETE FROM Valor WHERE id = ?
`

func (q *Queries) DeleteValor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteValor, id)
	return err
}

const listValors = `-- name: ListValors :many
SELECT id, valor, data_inicio, data_fim FROM Valor
`

func (q *Queries) ListValors(ctx context.Context) ([]Valor, error) {
	rows, err := q.db.QueryContext(ctx, listValors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Valor
	for rows.Next() {
		var i Valor
		if err := rows.Scan(
			&i.ID,
			&i.Valor,
			&i.DataInicio,
			&i.DataFim,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateValor = `-- name: UpdateValor :exec
UPDATE Valor SET valor = ?, data_inicio = ?, data_fim = ? WHERE id = ?
`

type UpdateValorParams struct {
	Valor      int64        `json:"valor"`
	DataInicio time.Time    `json:"data_inicio"`
	DataFim    sql.NullTime `json:"data_fim"`
	ID         int64        `json:"id"`
}

func (q *Queries) UpdateValor(ctx context.Context, arg UpdateValorParams) error {
	_, err := q.db.ExecContext(ctx, updateValor,
		arg.Valor,
		arg.DataInicio,
		arg.DataFim,
		arg.ID,
	)
	return err
}
