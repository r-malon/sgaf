// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: Item.sql

package db

import (
	"context"
)

const createItem = `-- name: CreateItem :exec
INSERT INTO Item (descricao, banda_maxima, banda_instalada, data_instalacao, quantidade, status) VALUES (?, ?, ?, ?, ?, ?)
`

type CreateItemParams struct {
	Descricao      string `json:"descricao"`
	BandaMaxima    int64  `json:"banda_maxima"`
	BandaInstalada int64  `json:"banda_instalada"`
	DataInstalacao string `json:"data_instalacao"`
	Quantidade     int64  `json:"quantidade"`
	Status         bool   `json:"status"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) error {
	_, err := q.db.ExecContext(ctx, createItem,
		arg.Descricao,
		arg.BandaMaxima,
		arg.BandaInstalada,
		arg.DataInstalacao,
		arg.Quantidade,
		arg.Status,
	)
	return err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM Item WHERE id = ?
`

func (q *Queries) DeleteItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteItem, id)
	return err
}

const listItems = `-- name: ListItems :many
SELECT id, af_id, local_id, descricao, banda_maxima, banda_instalada, data_instalacao, quantidade, status FROM Item
`

func (q *Queries) ListItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.AfID,
			&i.LocalID,
			&i.Descricao,
			&i.BandaMaxima,
			&i.BandaInstalada,
			&i.DataInstalacao,
			&i.Quantidade,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :exec
UPDATE Item SET descricao = ?, banda_maxima = ?, banda_instalada = ?, data_instalacao = ?, quantidade = ?, status = ? WHERE id = ?
`

type UpdateItemParams struct {
	Descricao      string `json:"descricao"`
	BandaMaxima    int64  `json:"banda_maxima"`
	BandaInstalada int64  `json:"banda_instalada"`
	DataInstalacao string `json:"data_instalacao"`
	Quantidade     int64  `json:"quantidade"`
	Status         bool   `json:"status"`
	ID             int64  `json:"id"`
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) error {
	_, err := q.db.ExecContext(ctx, updateItem,
		arg.Descricao,
		arg.BandaMaxima,
		arg.BandaInstalada,
		arg.DataInstalacao,
		arg.Quantidade,
		arg.Status,
		arg.ID,
	)
	return err
}
