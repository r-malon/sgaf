// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: Local.sql

package db

import (
	"context"
)

const createLocal = `-- name: CreateLocal :exec
INSERT INTO Local (nome) VALUES (?)
`

func (q *Queries) CreateLocal(ctx context.Context, nome string) error {
	_, err := q.db.ExecContext(ctx, createLocal, nome)
	return err
}

const deleteLocal = `-- name: DeleteLocal :exec
DELETE FROM Local WHERE id = ?
`

func (q *Queries) DeleteLocal(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLocal, id)
	return err
}

const getLocal = `-- name: GetLocal :one
SELECT id, nome FROM Local WHERE id = ?
`

func (q *Queries) GetLocal(ctx context.Context, id int64) (Local, error) {
	row := q.db.QueryRowContext(ctx, getLocal, id)
	var i Local
	err := row.Scan(&i.ID, &i.Nome)
	return i, err
}

const listLocals = `-- name: ListLocals :many
SELECT id, nome FROM Local
`

func (q *Queries) ListLocals(ctx context.Context) ([]Local, error) {
	rows, err := q.db.QueryContext(ctx, listLocals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Local
	for rows.Next() {
		var i Local
		if err := rows.Scan(&i.ID, &i.Nome); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLocal = `-- name: UpdateLocal :exec
UPDATE Local SET nome = ? WHERE id = ?
`

type UpdateLocalParams struct {
	Nome string `json:"nome"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateLocal(ctx context.Context, arg UpdateLocalParams) error {
	_, err := q.db.ExecContext(ctx, updateLocal, arg.Nome, arg.ID)
	return err
}
