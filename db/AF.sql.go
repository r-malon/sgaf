// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: AF.sql

package db

import (
	"context"
)

const createAF = `-- name: CreateAF :exec
INSERT INTO AF (numero, fornecedor, descricao, data_inicio, data_fim, status) VALUES (?, ?, ?, ?, ?, ?)
`

type CreateAFParams struct {
	Numero     int64  `json:"numero"`
	Fornecedor string `json:"fornecedor"`
	Descricao  string `json:"descricao"`
	DataInicio string `json:"data_inicio"`
	DataFim    string `json:"data_fim"`
	Status     bool   `json:"status"`
}

func (q *Queries) CreateAF(ctx context.Context, arg CreateAFParams) error {
	_, err := q.db.ExecContext(ctx, createAF,
		arg.Numero,
		arg.Fornecedor,
		arg.Descricao,
		arg.DataInicio,
		arg.DataFim,
		arg.Status,
	)
	return err
}

const deleteAF = `-- name: DeleteAF :exec
DELETE FROM AF WHERE id = ?
`

func (q *Queries) DeleteAF(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAF, id)
	return err
}

const getAF = `-- name: GetAF :one
SELECT id, numero, fornecedor, descricao, data_inicio, data_fim, status FROM AF WHERE id = ?
`

func (q *Queries) GetAF(ctx context.Context, id int64) (AF, error) {
	row := q.db.QueryRowContext(ctx, getAF, id)
	var i AF
	err := row.Scan(
		&i.ID,
		&i.Numero,
		&i.Fornecedor,
		&i.Descricao,
		&i.DataInicio,
		&i.DataFim,
		&i.Status,
	)
	return i, err
}

const listAFs = `-- name: ListAFs :many
SELECT id, numero, fornecedor, descricao, data_inicio, data_fim, status FROM AF ORDER BY numero
`

func (q *Queries) ListAFs(ctx context.Context) ([]AF, error) {
	rows, err := q.db.QueryContext(ctx, listAFs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AF
	for rows.Next() {
		var i AF
		if err := rows.Scan(
			&i.ID,
			&i.Numero,
			&i.Fornecedor,
			&i.Descricao,
			&i.DataInicio,
			&i.DataFim,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAF = `-- name: UpdateAF :exec
UPDATE AF SET numero = ?, fornecedor = ?, descricao = ?, data_inicio = ?, data_fim = ?, status = ? WHERE id = ?
`

type UpdateAFParams struct {
	Numero     int64  `json:"numero"`
	Fornecedor string `json:"fornecedor"`
	Descricao  string `json:"descricao"`
	DataInicio string `json:"data_inicio"`
	DataFim    string `json:"data_fim"`
	Status     bool   `json:"status"`
	ID         int64  `json:"id"`
}

func (q *Queries) UpdateAF(ctx context.Context, arg UpdateAFParams) error {
	_, err := q.db.ExecContext(ctx, updateAF,
		arg.Numero,
		arg.Fornecedor,
		arg.Descricao,
		arg.DataInicio,
		arg.DataFim,
		arg.Status,
		arg.ID,
	)
	return err
}
