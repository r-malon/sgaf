// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: AF.sql

package db

import (
	"context"
	"time"
)

const createAF = `-- name: CreateAF :one
INSERT INTO AF (numero, fornecedor, descricao, data_inicial, data_final, status) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, numero, fornecedor, descricao, data_inicial, data_final, status
`

type CreateAFParams struct {
	Numero      int64     `json:"numero"`
	Fornecedor  string    `json:"fornecedor"`
	Descricao   string    `json:"descricao"`
	DataInicial time.Time `json:"data_inicial"`
	DataFinal   time.Time `json:"data_final"`
	Status      bool      `json:"status"`
}

func (q *Queries) CreateAF(ctx context.Context, arg CreateAFParams) (AF, error) {
	row := q.db.QueryRowContext(ctx, createAF,
		arg.Numero,
		arg.Fornecedor,
		arg.Descricao,
		arg.DataInicial,
		arg.DataFinal,
		arg.Status,
	)
	var i AF
	err := row.Scan(
		&i.ID,
		&i.Numero,
		&i.Fornecedor,
		&i.Descricao,
		&i.DataInicial,
		&i.DataFinal,
		&i.Status,
	)
	return i, err
}

const deleteAF = `-- name: DeleteAF :exec
DELETE FROM AF WHERE numero = ?
`

func (q *Queries) DeleteAF(ctx context.Context, numero int64) error {
	_, err := q.db.ExecContext(ctx, deleteAF, numero)
	return err
}

const listAFs = `-- name: ListAFs :many
SELECT id, numero, fornecedor, descricao, data_inicial, data_final, status FROM AF ORDER BY numero
`

func (q *Queries) ListAFs(ctx context.Context) ([]AF, error) {
	rows, err := q.db.QueryContext(ctx, listAFs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AF
	for rows.Next() {
		var i AF
		if err := rows.Scan(
			&i.ID,
			&i.Numero,
			&i.Fornecedor,
			&i.Descricao,
			&i.DataInicial,
			&i.DataFinal,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAF = `-- name: UpdateAF :exec
UPDATE AF SET numero = ? WHERE numero = ?
`

type UpdateAFParams struct {
	Numero   int64 `json:"numero"`
	Numero_2 int64 `json:"numero_2"`
}

func (q *Queries) UpdateAF(ctx context.Context, arg UpdateAFParams) error {
	_, err := q.db.ExecContext(ctx, updateAF, arg.Numero, arg.Numero_2)
	return err
}
